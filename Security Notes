-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 1
  - 19 	EMVA-007-M 	rOVUm5ZPEn9ZwBQ 	10.50.23.5 (windows)/10.50.31.142(linux)
  - https://sec.cybbh.io/public/security/latest/index.html
  - /usr/share/nmap/scripts
  - nmap [ip] [options] --script [script name]
  - XFREERDP Syntax: xfreerdp /v:10.50.x.x /u:student /p:password /size:1920x1000 +clipboard
  - Pen Testing:
    - 
  - Scanning and Recon:
    - 
  - Vulnerability and Exploitation Research:
    - Initial Access:
      - 
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 2
  - Web Exploitation Part 1:
    - HTTP methods:
      - GET = retrieves information
      - POST = sends information
      - HEAD = requests headers 
      - PUT = replaces all representations of a resource with the uploaded content
      - 10X == Informational
      - 2XX == Success
      - 30X == Redirection
      - 4XX == Client Error
      - 5XX == Server Error
      - Robots.txt = instructions for web crawlers    
      - http-enum script: nmap --script http-enum [ip address]
    - Cross-Site Scripting (XSS):
      - Insertion of arbitrary code into a webpage that executes untrusted code on a victims browser
      - Unsanatized GET, POST, and PUT methods allow JS to be placed on websites
      - Reflected XSS:
        - Most common form
        - Puts code in the URL
        - Delivered through intermediate media
      - Stored XSS:
        - Resides on vulnerable site
        - Only requires user to visit page
      - Directory Traversal
        - Ability to read/execute outside web server directory
        - Uses relative paths to manipulate
        - ../../../../etc/passwd
        - SSI injection code <!DOCTYPE html>
          <html>
          <body>
          <h1>A Web Page</h1>
          <p id="demo">A Paragraph</p>
          <button type="button" onclick="myFunction()">Try it</button>
          <script>
          function myFunction() {
             document.getElementById("demo").innerHTML = "Paragraph changed.";
          }
          </script>
          </body>
          </html>
      - Command Injection:
        - Application on the server is vulnerable, allowing execution of arbitrary commands
        - User input is not validated; common example is a SOHO router with a web page to allow ping
        - run the following to chain/stack our arbitrary command: ; cat /etc/passwd
        
