-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 1
-----------------------------------------------------------------------------------------------------------------------------------------------------------
  - 19 	EMVA-007-M 	rOVUm5ZPEn9ZwBQ 	10.50.23.5 (windows)/10.50.31.142(linux)
  - https://sec.cybbh.io/public/security/latest/index.html
  - /usr/share/nmap/scripts
  - nmap [ip] [options] --script [script name]
  - XFREERDP Syntax: xfreerdp /v:10.50.x.x /u:student /p:password /size:1920x1000 +clipboard
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 2
-----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Web Exploitation Part 1:
    - HTTP methods:
      - GET = retrieves information
      - POST = sends information
      - HEAD = requests headers 
      - PUT = replaces all representations of a resource with the uploaded content
      - 10X == Informational
      - 2XX == Success
      - 30X == Redirection
      - 4XX == Client Error
      - 5XX == Server Error
      - Robots.txt = instructions for web crawlers    
      - http-enum script: nmap --script http-enum [ip address]
    - Cross-Site Scripting (XSS):
      - Insertion of arbitrary code into a webpage that executes untrusted code on a victims browser
      - Unsanatized GET, POST, and PUT methods allow JS to be placed on websites
      - Reflected XSS:
        - Most common form
        - Puts code in the URL
        - Delivered through intermediate media
      - Stored XSS:
        - Resides on vulnerable site
        - Only requires user to visit page
      - Directory Traversal
        - Ability to read/execute outside web server directory
        - Uses relative paths to manipulate
        - ../../../../etc/passwd
        - SSI injection code <!DOCTYPE html>
          <html>
          <body>
          <h1>A Web Page</h1>
          <p id="demo">A Paragraph</p>
          <button type="button" onclick="myFunction()">Try it</button>
          <script>
          function myFunction() {
             document.getElementById("demo").innerHTML = "Paragraph changed.";
          }
          </script>
          </body>
          </html>
      - Command Injection:
        - Application on the server is vulnerable, allowing execution of arbitrary commands
        - User input is not validated; common example is a SOHO router with a web page to allow ping
        - run the following to chain/stack our arbitrary command: ; cat /etc/passwd
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 3
-----------------------------------------------------------------------------------------------------------------------------------------------------------
  - SQL:
    - https://www.invicti.com/blog/web-security/sql-injection-cheat-sheet/
    - mysql opens sql 
    - select * from session.car; - shows everything from that session
    - select * from union select [table], [columns], 1, 2
    - SELECT - Extracts data from a database
    - UNION - Used to combine the result-set of two or more SELECT statements
    - USE - Selects the DB to use
    - UPDATE - Updates data in a database
    - DELETE - Deletes data from a database
    - INSERT INTO - Inserts new data into a database
    - CREATE DATABASE - Creates a new database
    - ALTER DATABASE - Modifies a database
    - CREATE TABLE - Creates a new table
    - ALTER TABLE - Modifies a table
    - DROP TABLE - Deletes a table
    - CREATE INDEX - Creates an index (search key)
    - DROP INDEX - Deletes an index
    - https://www.w3schools.com/SQL/sql_syntax.asp
    - Operator Condition SQL Example:
       - =, !=, < <=, >, >= 	Standard numerical operators 	col_name != 4
       - BETWEEN … AND … 	Number is within range of two values (inclusive) 	col_name BETWEEN 1.5 AND 10.5
       - NOT BETWEEN … AND … 	Number is not within range of two values (inclusive) 	col_name NOT BETWEEN 1 AND 10
       - IN (…) 	Number exists in a list 	col_name IN (2, 4, 6)
       - NOT IN (…) 	Number does not exist in a list 	col_name NOT IN (1, 3, 5)
    - Is information_schema Database available?
    - GET Request versus POST Request HTTP methods
    - Unsanitized: input fields can be found using a Single Quote ⇒ '
    - Sanitized: input fields are checked for items that might harm the database (Items are removed, escaped, or turned into a single string)
    - Validation: checks inputs to ensure it meets a criteria (String doesn’t contain ')
    - Server-Side Query Processing:
      - User enters JohnDoe243 in the name form field and pass1234$ in the pass form field.
      Before Input:
        - SELECT id FROM users WHERE name=‘$name’ AND pass=‘$pass’;
      After Input:
        - SELECT id FROM users WHERE name=‘JohnDoe243’ AND pass=‘pass1234’;
      Injecting Your Statements:
        - User enters tom' OR 1='1 in the name and pass fields.
        - Truth Statement: tom' OR 1='1
        - Server Query Appears as:
          - SELECT id FROM users WHERE name=‘tom' OR 1='1’ AND pass=‘tom' OR 1='1’
        - Doing this in the URL using a get method can show username info
        - Selection=2 Union Select 1,2,3 = shows a layout of what tables go in what order using GET method
        - [Table]=2 Union Select 1,2,3,load_file("/etc/passwd)",5 # = loads a file using POST method 
        - php?item=4 UNION SELECT 1,table_name,3 from information_schema.tables where table_schema=database()        
        - Selection=2 Union Select table_schema, table_name FROM information_schema.table = loads information schema table, showing all info about the database
        - [Table] UNION SELECT @@version.database(),3,name,size FROM session.[session name]; 5 - POST
     - Information Schema:
       - On SQL server: 
         To showSELECT * FROM sys.databases;
         EXEC sp_databases; 
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 4
-----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Reverse Engineering
    - X86_64 Assembly:
      - %rax - return the first register
      - %rbp - the base pointer that keeps track of the base of the stack
      - %rsp - the stack pointer that points to the top of the stack
      - HEAP - Memory that can be allocated and deallocated
      - STACK - A contiguous section of memory used for passing arguments
      - GENERAL REGISTER - A multipurpose register that can be used by either programmer or user to store data or a memory location address
      - CONTROL REGISTER - A processor register that changes or controls the behavior of a CPU
      - FLAGS REGISTER - Contains the current state of the processor
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 5
-----------------------------------------------------------------------------------------------------------------------------------------------------------
  - 
